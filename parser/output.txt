#include <iostream>
#include <stdlib.h>
using namespace std;


/*  Example linked list Pascal Program                          */
/*                                                              */
/*  The file list.data would be used as the data file.          */
/*  If there was an executable, a.out, run:  a.out < list.data  */
const int grades = 5;
/* number of grades to be averaged */
const int avgposition = 6;
/* position of grade average */
const int size = 4;
/* number of students */
const double fooconst = 1.234;
const bool barconst = false;

typedef int integerarray[6];
typedef double footype;
typedef struct cell *cellptr;
typedef struct cell {
    int id;
    integerarray info;
    int*temp;
    footype*temp3;
    cellptr next;
} cell;

int *temp2;
bool *testarray[3][6];
cellptr list;
cellptr newrec;
int count;
int classnum;
/* ************************************************************************* */
/* procedure insert                                                          */
/* ************************************************************************* */

void insert(cellptr &list, cellptr newrec)
{
    int x;
    string str;
    cellptr current;
    bool found;
    
    x = 42;
    str = "hello";
    str = "world";
    x = x * 23 + 12 - 5 / 0;
    current = list;
    found = false;
    if ((list == NULL)) {
        newrec[0].next = list;
        /* fix bug so next is set to nil */
        list = newrec;
        } 
    else {
        if ((newrec[0].id < list[0].id)) {
            newrec[0].next = list;
            list = newrec;
            } 
        else {
            while ((current != NULL) && (!found)) {
                if ((current[0].next == NULL)) {
                    newrec[0].next = NULL;
                    /* fix bug so next is set to nil */
                    current[0].next = newrec;
                    found = true;
                    } 
                else {
                    if ((newrec[0].id < current[0].next[0].id)) {
                        newrec[0].next = current[0].next;
                        current[0].next = newrec;
                        found = true;
                        } 
                    } 
                current = current[0].next;
                }
            } 
        } 
    
}

/* ************************************************************************* */
/* function average                                                          */
/* ************************************************************************* */
int average(cellptr newrec)
{
    int average_;
    int i;
    int sum;
    
    sum = 0;
    for (i = 1; i <= grades; i++) {
        sum = sum + newrec[0].info[i];
        }
    average_ = sum / grades;
    return average_;
    
}

/* ************************************************************************* */
/* procedure makeNewrec                                                      */
/* ************************************************************************* */
void makenewrec(cellptr &newrec)
{
    int i;
    
    newrec = new cell ;
    cin >> newrec[0].id;
    for (i = 1; i <= grades; i++) {
        cin >> newrec[0].info[i];
        }
    newrec[0].info[avgposition] = average(newrec);
    
}

/* ************************************************************************* */
/* procedure displayInfo                                                     */
/* ************************************************************************* */
void displayinfo(cellptr &list)
{
    int i;
    cellptr current;
    
    current = list;
    if ((list != NULL)) {
        cout << "            ";
        for (i = 1; i <= grades; i++) {
            cout << "Grade     ";
            }
        cout << endl;
        cout << "Student";
        for (i = 1; i <= grades; i++) {
            cout << i;
            }
        for (i = 1; i >= grades; i--) {
            cout << i;
            }
        cout << "        Average" << endl;
        for (i = 1; i <= grades + 2; i++) {
            cout << "-----------";
            }
        cout << endl;
        while ((current != NULL)) {
            cout << current[0].id;
            for (i = 1; i <= (grades + 1); i++) {
                cout << current[0].info[i];
                }
            cout << endl;
            current = current[0].next;
            }
        } 
    
}

/* ************************************************************************* */
/* procedure cleanup                                                         */
/* ************************************************************************* */
void cleanup(cellptr &list)
{
    cellptr current;
    
    while ((list != NULL)) {
        current = list;
        list = list[0].next;
        current[0].next = NULL;
        delete current;
        }
    current = NULL;
    
}

/* ************************************************************************** */
/* main program                                                               */
/* ************************************************************************** */
int main()
{
    cin >> classnum;
    list = NULL;
    for (count = 1; count <= size; count++) {
        makenewrec(newrec);
        insert(list, newrec);
        }
    cout << "Here are the class grades for class:" << classnum << endl;
    cout << endl;
    displayinfo(list);
    cleanup(list);
    }
